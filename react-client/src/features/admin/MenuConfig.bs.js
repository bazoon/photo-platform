// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactFinalForm from "react-final-form";
import * as ApiJs from "../../core/api.js";
import * as Button from "primereact/button";
import * as UtilsJs from "../../core/utils.js";
import * as Dropdown from "primereact/dropdown";
import ReactAnimatedTree from "react-animated-tree";

function asyncGet(prim) {
  return ApiJs.asyncGet(prim);
}

function asyncGetLexicons(prim) {
  return ApiJs.asyncGet(prim);
}

function showConfirm(prim0, prim1, prim2, prim3) {
  return UtilsJs.showConfirm(prim0, prim1, prim2 !== undefined ? Caml_option.valFromOption(prim2) : undefined, prim3 !== undefined ? Caml_option.valFromOption(prim3) : undefined);
}

var Button$1 = {};

var Field = {};

var Dropdown$1 = {};

var Tree = {};

var RadioButton = {};

var Dialog = {};

function MenuConfig(Props) {
  var id = Props.id;
  React.useState(function () {
        return [];
      });
  var match = React.useState(function () {
        
      });
  var setParent = match[1];
  var parent = match[0];
  var match$1 = React.useState(function () {
        return [];
      });
  var setChildren = match$1[1];
  var match$2 = React.useState(function () {
        return [];
      });
  var setLexicons = match$2[1];
  var lexicons = match$2[0];
  var cleanUp = function (param) {
    
  };
  var failed = function (param) {
    
  };
  var cancel = function (param) {
    
  };
  var renderAddDialog = function (item) {
    return React.createElement("div", undefined, React.createElement(ReactFinalForm.Field, {
                    name: "lexId",
                    render: (function (param) {
                        var input = param.input;
                        return React.createElement("div", {
                                    className: "p-field"
                                  }, React.createElement("div", undefined, React.createElement("label", {
                                            htmlFor: "lexId"
                                          }, "Lexicon"), React.createElement(Dropdown.Dropdown, {
                                            id: "id",
                                            optionLabel: "code",
                                            options: lexicons,
                                            value: input.value,
                                            onChange: input.onChange
                                          })));
                      })
                  }));
  };
  var addOk = function (param) {
    
  };
  var renderControls = function (item) {
    return React.createElement("div", {
                className: "inline-flex"
              }, React.createElement("div", {
                    className: "mr-5"
                  }, item.code), React.createElement(Button.Button, {
                    onClick: (function (param) {
                        
                      }),
                    className: "mr-2",
                    icon: "pi pi-pencil"
                  }), React.createElement(Button.Button, {
                    onClick: (function (param) {
                        Curry._3(showConfirm(renderAddDialog(item), React.createElement("span", undefined, "dwd"), Caml_option.some(undefined), Caml_option.some(undefined)).fork, cancel, addOk, cleanUp);
                        
                      }),
                    className: "mr-2",
                    icon: "pi pi-plus"
                  }), React.createElement(Button.Button, {
                    onClick: (function (param) {
                        
                      }),
                    className: "mr-2",
                    icon: "pi pi-trash"
                  }), React.createElement(Button.Button, {
                    onClick: (function (param) {
                        
                      }),
                    className: "mr-2",
                    icon: "pi pi-arrow-down"
                  }), React.createElement(Button.Button, {
                    onClick: (function (param) {
                        
                      }),
                    className: "mr-2",
                    icon: "pi pi-arrow-up"
                  }));
  };
  var renderItem = function (item, items, level) {
    var children = Belt_Array.reduce(items, [], (function (a, e) {
            if (e.parentId === item.id) {
              return Belt_Array.concat(a, [e]);
            } else {
              return a;
            }
          }));
    if (children.length === 0) {
      return React.createElement(ReactAnimatedTree, {
                  content: renderControls(item)
                });
    } else {
      return React.createElement(ReactAnimatedTree, {
                  children: Belt_Array.map(children, (function (i) {
                          return renderItem(i, children, (level << 3));
                        })),
                  content: item.code,
                  type: React.createElement("span", undefined),
                  open: true
                });
    }
  };
  var loadOk = function (menu) {
    Curry._1(setChildren, (function (param) {
            return menu.children;
          }));
    Curry._1(setParent, (function (param) {
            return menu.parent;
          }));
    
  };
  var load = function (param) {
    return Curry._3(ApiJs.asyncGet("api/admin/menuConfig/" + id).fork, failed, loadOk, cleanUp);
  };
  var loadLexiconsOk = function (d) {
    return Curry._1(setLexicons, (function (param) {
                  return d;
                }));
  };
  var loadLexicons = function (param) {
    return Curry._3(ApiJs.asyncGet("api/admin/lexicons").fork, failed, loadLexiconsOk, cleanUp);
  };
  React.useEffect((function () {
          load(undefined);
          loadLexicons(undefined);
          
        }), []);
  return React.createElement("div", {
              className: "mt-10 text-3xl"
            }, parent !== undefined ? renderItem(parent, match$1[0], 1) : React.createElement("div", undefined, "None"));
}

var make = MenuConfig;

export {
  asyncGet ,
  asyncGetLexicons ,
  showConfirm ,
  Button$1 as Button,
  Field ,
  Dropdown$1 as Dropdown,
  Tree ,
  RadioButton ,
  Dialog ,
  make ,
  
}
/* react Not a pure module */
